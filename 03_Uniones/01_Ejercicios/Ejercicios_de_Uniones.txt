{
 "cells": [
  {
   "cell_type": "markdown",
   "metadata": {
    "id": "EOlxCfFAmIqq"
   },
   "source": [
    "## Unión de Tablas de Datos Meteorológicos\n",
    "\n",
    "Tienes el excel EstaciónMeteo.xlsx con datos horarios de una estación meteorológica que contienen información sobre temperatura, humedad y presión atmosférica. Las tres tablas tienen las mismas columnas, excepto la segunda tabla, que no contiene datos de presión atmosférica. Une las tres tablas verticalmente."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 1,
   "metadata": {
    "executionInfo": {
     "elapsed": 342,
     "status": "ok",
     "timestamp": 1732105265823,
     "user": {
      "displayName": "Aitor Donado",
      "userId": "08246046509718212083"
     },
     "user_tz": -60
    },
    "id": "q-pJIFb-mGjE"
   },
   "outputs": [],
   "source": [
    "import pandas as pd\n",
    "import numpy as np"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 3,
   "metadata": {},
   "outputs": [],
   "source": [
    "import os\n",
    "os.chdir(r\"C:\\americo\\ia_dema\\03_uniones\\01_Ejercicios\")"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "id": "5R4cZdHhFGvg"
   },
   "source": [
    "Cargamos los datos del Excel [Documentación Pandas read_excel](https://pandas.pydata.org/docs/reference/api/pandas.read_excel.html)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {
    "executionInfo": {
     "elapsed": 282,
     "status": "ok",
     "timestamp": 1732105331020,
     "user": {
      "displayName": "Aitor Donado",
      "userId": "08246046509718212083"
     },
     "user_tz": -60
    },
    "id": "ol11eRtAsf3p"
   },
   "outputs": [],
   "source": [
    "# Ruta completa al Excel\n",
    "# Directorio donde está el Excel\n",
    "dir_base = r\"C:\\americo\\ia_dema\\03_uniones\\01_Ejercicios\"\n",
    "# Nombre del fichero\n",
    "nombre_archivo1 = \"EstaciónMeteo.xlsx\"\n",
    "# Construimos la ruta completa\n",
    "archivo1 = os.path.join(dir_base, nombre_archivo1)\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 5,
   "metadata": {},
   "outputs": [],
   "source": [
    "\n",
    "# Leer las hojas\n",
    "lunes     = pd.read_excel(archivo1, sheet_name=\"Lunes\")\n",
    "martes    = pd.read_excel(archivo1, sheet_name=\"Martes\")\n",
    "miercoles = pd.read_excel(archivo1, sheet_name=\"Miércoles\")\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 6,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "(24, 4) (24, 3) (24, 4)\n"
     ]
    }
   ],
   "source": [
    "\n",
    "# Verifica que se han cargado correctamente\n",
    "print(lunes.shape, martes.shape, miercoles.shape)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 7,
   "metadata": {
    "colab": {
     "base_uri": "https://localhost:8080/",
     "height": 206
    },
    "executionInfo": {
     "elapsed": 246,
     "status": "ok",
     "timestamp": 1732105359795,
     "user": {
      "displayName": "Aitor Donado",
      "userId": "08246046509718212083"
     },
     "user_tz": -60
    },
    "id": "FhB3A0M4hfbe",
    "outputId": "c1bf876f-5902-4241-cf16-22a79967aabc"
   },
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>Hora</th>\n",
       "      <th>Temperatura (°C)</th>\n",
       "      <th>Humedad (%)</th>\n",
       "      <th>Presión (hPa)</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>00:00</td>\n",
       "      <td>10.5</td>\n",
       "      <td>65</td>\n",
       "      <td>1013.2</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>01:00</td>\n",
       "      <td>9.8</td>\n",
       "      <td>68</td>\n",
       "      <td>1012.8</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>02:00</td>\n",
       "      <td>9.2</td>\n",
       "      <td>70</td>\n",
       "      <td>1012.5</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>03:00</td>\n",
       "      <td>8.7</td>\n",
       "      <td>72</td>\n",
       "      <td>1012.3</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>04:00</td>\n",
       "      <td>8.3</td>\n",
       "      <td>74</td>\n",
       "      <td>1012.1</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "    Hora  Temperatura (°C)  Humedad (%)  Presión (hPa)\n",
       "0  00:00              10.5           65         1013.2\n",
       "1  01:00               9.8           68         1012.8\n",
       "2  02:00               9.2           70         1012.5\n",
       "3  03:00               8.7           72         1012.3\n",
       "4  04:00               8.3           74         1012.1"
      ]
     },
     "execution_count": 7,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "lunes.head()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 8,
   "metadata": {
    "colab": {
     "base_uri": "https://localhost:8080/",
     "height": 447
    },
    "executionInfo": {
     "elapsed": 1626,
     "status": "ok",
     "timestamp": 1732105398380,
     "user": {
      "displayName": "Aitor Donado",
      "userId": "08246046509718212083"
     },
     "user_tz": -60
    },
    "id": "Of-Ywi8phnXV",
    "outputId": "5c56b5ed-061a-463b-a2a6-53892fb163bd"
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "<Axes: >"
      ]
     },
     "execution_count": 8,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "image/png": "",
      "text/plain": [
       "<Figure size 640x480 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "lunes[\"Temperatura (°C)\"].plot()"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "id": "EkS7iwTMFsf2"
   },
   "source": [
    "Concatenamos las tablas del excel."
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "id": "MCcyY66MrvB8"
   },
   "source": [
    "- Posteriormente aparece un csv llamado Vientos.csv de datos de velocidad y dirección \n",
    " \n",
    "del viento pero, en este caso, los datos son cada 15 minutos. "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 18,
   "metadata": {},
   "outputs": [],
   "source": [
    "# Ruta completa al Excel\n",
    "# Directorio donde está el Excel\n",
    "dir_base = r\"C:\\americo\\ia_dema\\03_uniones\\01_Ejercicios\"\n",
    "# Nombre del fichero\n",
    "nombre_archivo2 = \"Vientos.csv\"\n",
    "# Construimos la ruta completa\n",
    "archivo2 = os.path.join(dir_base, nombre_archivo2)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 21,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "'C:\\\\americo\\\\ia_dema\\\\03_uniones\\\\01_Ejercicios\\\\Vientos.csv'"
      ]
     },
     "execution_count": 21,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "archivo2"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 27,
   "metadata": {},
   "outputs": [],
   "source": [
    "# Leer todo el libro (todas las hojas)\n",
    "\n",
    "\n",
    "df_archivo2 = pd.read_csv(archivo2, sep=\",\", encoding='utf-8')\n",
    "\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 28,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>Día</th>\n",
       "      <th>Hora</th>\n",
       "      <th>Velocidad del viento</th>\n",
       "      <th>Dirección del viento</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>1</td>\n",
       "      <td>00:00:00</td>\n",
       "      <td>0</td>\n",
       "      <td>234</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>1</td>\n",
       "      <td>00:15:00</td>\n",
       "      <td>0</td>\n",
       "      <td>234</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>1</td>\n",
       "      <td>00:30:00</td>\n",
       "      <td>0</td>\n",
       "      <td>234</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>1</td>\n",
       "      <td>00:45:00</td>\n",
       "      <td>0</td>\n",
       "      <td>234</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>1</td>\n",
       "      <td>01:00:00</td>\n",
       "      <td>0</td>\n",
       "      <td>234</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>...</th>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>283</th>\n",
       "      <td>3</td>\n",
       "      <td>22:45:00</td>\n",
       "      <td>0,4</td>\n",
       "      <td>286</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>284</th>\n",
       "      <td>3</td>\n",
       "      <td>23:00:00</td>\n",
       "      <td>0,2</td>\n",
       "      <td>254</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>285</th>\n",
       "      <td>3</td>\n",
       "      <td>23:15:00</td>\n",
       "      <td>0</td>\n",
       "      <td>232</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>286</th>\n",
       "      <td>3</td>\n",
       "      <td>23:30:00</td>\n",
       "      <td>0</td>\n",
       "      <td>232</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>287</th>\n",
       "      <td>3</td>\n",
       "      <td>23:45:00</td>\n",
       "      <td>0</td>\n",
       "      <td>232</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "<p>288 rows × 4 columns</p>\n",
       "</div>"
      ],
      "text/plain": [
       "     Día      Hora Velocidad del viento  Dirección del viento\n",
       "0      1  00:00:00                    0                   234\n",
       "1      1  00:15:00                    0                   234\n",
       "2      1  00:30:00                    0                   234\n",
       "3      1  00:45:00                    0                   234\n",
       "4      1  01:00:00                    0                   234\n",
       "..   ...       ...                  ...                   ...\n",
       "283    3  22:45:00                  0,4                   286\n",
       "284    3  23:00:00                  0,2                   254\n",
       "285    3  23:15:00                    0                   232\n",
       "286    3  23:30:00                    0                   232\n",
       "287    3  23:45:00                    0                   232\n",
       "\n",
       "[288 rows x 4 columns]"
      ]
     },
     "execution_count": 28,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "df_archivo2"
   ]
  }
 ],
 "metadata": {
  "colab": {
   "provenance": []
  },
  "kernelspec": {
   "display_name": "base",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.10.9"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 0
}
